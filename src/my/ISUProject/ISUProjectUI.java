/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.ISUProject;

import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.EOFException;
import java.security.NoSuchAlgorithmException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author 335550752
 */
public class ISUProjectUI extends javax.swing.JFrame {

    File playerData = new File("playerData.txt");
    File teams = new File("teams.txt");
    ArrayList<String> playerStats = new ArrayList<>();
    ArrayList<String> players = new ArrayList<>();
    ArrayList<String> playersAvailable = new ArrayList<>();
    ArrayList<String> teamList = new ArrayList<>();
    ArrayList<String> sortNames = new ArrayList<>();
    ArrayList<Double> sortPoints = new ArrayList<>();
    Team team = new Team();

    /**
     * Creates new form ISUProjectUI
     */
    public ISUProjectUI() {
        initComponents();
        updateTeams();
        AutoCompleteDecorator.decorate(playersCombo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        teamCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sortByName = new javax.swing.JButton();
        sortByPoints = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerList = new javax.swing.JList();
        playersCombo = new javax.swing.JComboBox();
        tradeBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        toTradeCombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        searchList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        sortedList = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        teamCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamComboActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel2.setText("Select a team");

        jLabel1.setBackground(new java.awt.Color(153, 204, 255));
        jLabel1.setFont(new java.awt.Font("Cambria", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(50, 0, 0));
        jLabel1.setText("      Welcome to the Sports Management App");
        jLabel1.setOpaque(true);

        jLabel3.setText("Players");

        jLabel4.setText("Players Available");

        sortByName.setText("Sort By Name ↑");
        sortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByNameActionPerformed(evt);
            }
        });

        sortByPoints.setText("Sort By Points ↑");
        sortByPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByPointsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(teamCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(176, 176, 176)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sortByName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sortByPoints)
                        .addGap(37, 37, 37))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(teamCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sortByName)
                        .addComponent(sortByPoints))))
        );

        jScrollPane1.setViewportView(playerList);

        playersCombo.setEditable(true);

        tradeBtn.setText("Trade");
        tradeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeBtnActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");

        jLabel5.setText("Your Players");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(searchList1);

        jScrollPane2.setViewportView(sortedList);

        jLabel7.setText("Search by Team or Position");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 21, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tradeBtn)
                                .addGap(29, 29, 29)
                                .addComponent(jButton2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(toTradeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(playersCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel5)))
                .addGap(201, 201, 201)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playersCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toTradeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tradeBtn)
                            .addComponent(jButton2)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(2, 2, 2)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(178, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void teamComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamComboActionPerformed
        String teamStr = teamCombo.getSelectedItem().toString();
        team.setTeam(teamStr);
        teamCombo.setEnabled(false);
        team.setPlayersOnly();
        team.setStats();
        toTradeCombo.setModel(new DefaultComboBoxModel(team.getPlayersOnly().toArray()));
        playerList.setModel(new javax.swing.AbstractListModel() {
            ArrayList<String> strings = team.getPlayersOnly();

            @Override
            public int getSize() {
                return strings.size();
            }

            @Override
            public Object getElementAt(int i) {
                return strings.get(i);
            }
        });

        for (String playerStat : playerStats) {
            if (!playerStat.contains(team.getTeam())) {
                String[] split = playerStat.split(";");
                String player = split[1];
                playersAvailable.add(player);
            }
        }
        playersCombo.setModel(new DefaultComboBoxModel(playersAvailable.toArray()));
        getContentPane().add(playersCombo);
    }//GEN-LAST:event_teamComboActionPerformed

    private void tradeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeBtnActionPerformed
        String player1 = playersCombo.getSelectedItem().toString();
        String player2 = toTradeCombo.getSelectedItem().toString();
        String replace1, replace2, team1;

        for (int i = 0; i < playerStats.size(); i++) {
            if (playerStats.get(i).contains(player1)) {
                String[] split = playerStats.get(i).split(";");
                team1 = split[0];
                replace1 = playerStats.get(i).replace(team1, team.getTeam());
                playerStats.set(i, replace1);

                for (int j = 0; j < playerStats.size(); j++) {
                    if (playerStats.get(j).contains(player2)) {
                        replace2 = playerStats.get(j).replace(team.getTeam(), team1);
                        playerStats.set(j, replace2);
                    }
                }
            }
        }
        try { //print out the user data again, updating the user which wanted to swtich password. 
            PrintWriter output = new PrintWriter(playerData);
            for (String playerStats1 : playerStats) {
                output.println(playerStats1);
            }
            output.close();
        } catch (FileNotFoundException ex) {
            System.out.printf("ERROR %s\n", ex);
        }
        updateList();
    }//GEN-LAST:event_tradeBtnActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        searchList1.removeAll();
        ArrayList<String> players = new ArrayList<>();
        for (int i = 0; i < playerStats.size(); i++) {
            if (playerStats.get(i).contains(searchField.getText())) {
                String[] split = playerStats.get(i).split(";");
                players.add(split[1]);
                searchList1.setModel(new javax.swing.AbstractListModel() {
                    ArrayList<String> strings = players;

                    @Override
                    public int getSize() {
                        return strings.size();
                    }

                    @Override
                    public Object getElementAt(int i) {
                        return strings.get(i);
                    }
                });
            }
        }
    }//GEN-LAST:event_searchFieldActionPerformed

    private void sortByPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByPointsActionPerformed
        sortedList.removeAll();
        sortPoints.clear();
        for (String playerStat : playerStats) {
            String[] split = playerStat.split(";");
            double temp = Double.parseDouble(split[3]);
            sortPoints.add(temp);
        }

        if (sortByPoints.getText().contains("↓")) {
            sortPoints = sortPointsAscending(sortPoints);
            sortByPoints.setText("Sort By Name ↑");
        } else {
            sortPoints = sortPointsDescending(sortPoints);
            sortByPoints.setText("Sort By Name ↓");
        }
        
        ArrayList<String> sort = new ArrayList<>();
        

        sortedList.setModel(new javax.swing.AbstractListModel() {
            ArrayList<Double> strings = sortPoints;

            @Override
            public int getSize() {
                return strings.size();
            }

            @Override
            public Object getElementAt(int i) {
                return strings.get(i);
            }
        });
    }//GEN-LAST:event_sortByPointsActionPerformed

    private void sortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByNameActionPerformed
        sortedList.removeAll();
        sortNames.clear();
        for (String playerStat : playerStats) {
            String[] split = playerStat.split(";");
            sortNames.add(split[1]);
        }

        if (sortByName.getText().contains("↓")) {
            sortNames = sortStringAscending(sortNames);
            sortByName.setText("Sort By Name ↑");
        } else {
            sortNames = sortStringDescending(sortNames);
            sortByName.setText("Sort By Name ↓");
        }

        sortedList.setModel(new javax.swing.AbstractListModel() {
            ArrayList<String> strings = sortNames;

            @Override
            public int getSize() {
                return strings.size();
            }

            @Override
            public Object getElementAt(int i) {
                return strings.get(i);
            }
        });
    }//GEN-LAST:event_sortByNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ISUProjectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ISUProjectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ISUProjectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ISUProjectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ISUProjectUI().setVisible(true);
            }
        });
    }

    public void updateList() {
        playersAvailable.clear();
        team.clearPlayers();
        team.setPlayers();
        team.setPlayersOnly();
        playerList.removeAll();

        toTradeCombo.setModel(new DefaultComboBoxModel(team.getPlayersOnly().toArray()));
        playerList.setModel(new javax.swing.AbstractListModel() {
            ArrayList<String> strings = team.getPlayersOnly();

            @Override
            public int getSize() {
                return strings.size();
            }

            @Override
            public Object getElementAt(int i) {
                return strings.get(i);
            }
        });
        for (String playerStat : playerStats) {
            if (!playerStat.contains(team.getTeam())) {
                String[] split = playerStat.split(";");
                String player = split[1];
                playersAvailable.add(player);
            }
        }
        playersCombo.setModel(new DefaultComboBoxModel(playersAvailable.toArray()));
    }

    private void updateTeams() {
        try {
            Scanner sc = new Scanner(teams);
            while (sc.hasNextLine()) {
                teamList.add(sc.nextLine());
            }
            Scanner sc2 = new Scanner(playerData);
            while (sc2.hasNextLine()) {
                playerStats.add(sc2.nextLine());
            }
            sc.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUProjectUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        teamCombo.setModel(new DefaultComboBoxModel(teamList.toArray()));
        for (String playerStat : playerStats) {
            String[] split = playerStat.split(";");
            String player = split[1];
            players.add(player);
        }
        sortedList.setModel(new javax.swing.AbstractListModel() {
            ArrayList<String> strings = players;

            @Override
            public int getSize() {
                return strings.size();
            }

            @Override
            public Object getElementAt(int i) {
                return strings.get(i);
            }
        });
    }

    public static ArrayList sortStringAscending(ArrayList<String> listIn) {
        for (int i = 0; i < listIn.size(); i++) { //repeat for list size
            int index = i; //set index to i
            for (int j = i + 1; j < listIn.size(); j++) {
                if (listIn.get(j).compareTo(listIn.get(index)) < 0) { //if list at j is less than list at index, make a swap
                    index = j; //searching for lowest index  
                }
            }
            if (index != i) { //if index does not equal to i, swap the list item at i with the item at index
                String temp = listIn.get(index);
                listIn.set(index, listIn.get(i));
                listIn.set(i, temp);
            }
        }
        return listIn;
    }

    public static ArrayList sortStringDescending(ArrayList<String> listIn) {
        for (int i = 0; i < listIn.size(); i++) { //repeat for list size
            int index = i; //set index to i
            for (int j = i + 1; j < listIn.size(); j++) {
                if (listIn.get(j).compareTo(listIn.get(index)) > 0) { //if list at j is less than list at index, make a swap
                    index = j; //searching for lowest index  
                }
            }
            if (index != i) { //if index does not equal to i, swap the list item at i with the item at index
                String temp = listIn.get(index);
                listIn.set(index, listIn.get(i));
                listIn.set(i, temp);
            }
        }
        return listIn;
    }

    public static ArrayList sortPointsAscending(ArrayList<Double> listIn) {
        for (int i = 0; i < listIn.size(); i++) { //repeat for list size
            int index = i; //set index to i
            for (int j = i + 1; j < listIn.size(); j++) {
                if (listIn.get(j) < listIn.get(index)) { //if list at j is less than list at index, make a swap
                    index = j; //searching for lowest index  
                }
            }
            if (index != i) { //if index does not equal to i, swap the list item at i with the item at index
                double temp = listIn.get(index);
                listIn.set(index, listIn.get(i));
                listIn.set(i, temp);
            }
        }
        return listIn;
    }

    public static ArrayList sortPointsDescending(ArrayList<Double> listIn) {
        for (int i = 0; i < listIn.size(); i++) { //repeat for list size
            int index = i; //set index to i
            for (int j = i + 1; j < listIn.size(); j++) {
                if (listIn.get(j) > listIn.get(index)) { //if list at j is less than list at index, make a swap
                    index = j; //searching for lowest index  
                }
            }
            if (index != i) { //if index does not equal to i, swap the list item at i with the item at index
                double temp = listIn.get(index);
                listIn.set(index, listIn.get(i));
                listIn.set(i, temp);
            }
        }
        return listIn;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList playerList;
    private javax.swing.JComboBox playersCombo;
    private javax.swing.JTextField searchField;
    private javax.swing.JList searchList1;
    private javax.swing.JButton sortByName;
    private javax.swing.JButton sortByPoints;
    private javax.swing.JList sortedList;
    private javax.swing.JComboBox teamCombo;
    private javax.swing.JComboBox toTradeCombo;
    private javax.swing.JButton tradeBtn;
    // End of variables declaration//GEN-END:variables
}
